#!/bin/sh

if [ -f Makefile ] && ! head -n 1 Makefile | grep "Makefile generated by Smake." >/dev/null; then
	echo "Makefile isn't generated by smake; refusing to overwrite."
	echo "To run smake, manually move or delete the existing Makefile."
	exit 1
fi

if [ -n "$MAKE" ]; then
	make="$MAKE"
elif make="$(command -v gmake)"; then :
elif make="$(command -v make)"; then :
else
	echo "Neither 'gmake' nor 'make' was found. Either install make or set \$MAKE."
	exit 1
fi

# A somewhat ugly way to get a variable from the Smakefile
getvar() {
	output="$(echo "\
.PHONY: _skip
_skip: _dump
-include Smakefile
.PHONY: _dump
_dump:
	@echo \$($1)" | $make -f -)"

	if [ -n "$output" ]; then
		echo "$output"
	else
		echo "$2"
	fi
}

# Get some variables from the Smakefile
target="$(getvar TARGET main)"
projtype="$(getvar PROJTYPE exe)"
if ! echo " exe solib alib lib " | grep " $projtype " >/dev/null; then
	echo "Invalid projtype: $projtype. Expected exe, lib, alib or solib."
	exit 1
fi

# Find all the source code
sources="$(find src -name '*.c' -or -name '*.cc')"
srcs="$(printf "%s" "$sources" | tr '\n' ' ')"
hdrs="$(find src include -name '*.h')"

# Get the number of parallel jobs
if command -v nproc >/dev/null; then
	jobs="$(nproc)"
else
	jobs=8
fi

mk_target_exe() {
echo "\
\$(BUILD)/\$(TARGET): \$(OBJS) \$(EXTRADEPS)
	@mkdir -p \$(@D)
	\$(CC) -o \$@ \$(OBJS) \$(LDFLAGS)
	@echo Compiled \$@."
}

mk_target_solib() {
echo "\
\$(BUILD)/\$(TARGET).so: \$(OBJS) \$(EXTRADEPS)
	@mkdir -p \$(@D)
	\$(CC) -o \$@ \$(OBJS) -shared \$(LDLAGS)
	@echo Compiled \$@."
}

mk_target_alib() {
echo "\
\$(BUILD)/\$(TARGET).a: \$(OBJS) \$(EXTRADEPS)
	@mkdir -p \$(@D)
	\$(AR) crs \$@ \$(OBJS)
	@echo Compiled \$@."
}

mk_target_lib() {
	mk_target_solib
	echo
	mk_target_alib
}

mk_target() {
	case "$projtype" in
		exe) mk_target_exe;;
		solib) mk_target_solib;;
		alib) mk_target_alib;;
		lib) mk_target_lib;;
	esac
}

mk_installation_exe() {
echo "\
.PHONY: install
install: \$(BUILD)/\$(TARGET)
	mkdir -p \$(DESTDIR)\$(PREFIX)/bin
	cp -f \$^ \$(DESTDIR)\$(PREFIX)/bin
	chmod 755 \$(DESTDIR)\$(PREFIX)/bin/\$(TARGET)

.PHONY: uninstall
uninstall:
	rm -f \$(DESTDIR)\$(PREFIX)/bin/\$(TARGET)"
}

mk_installation_solib() {
echo "\
.PHONY: install
install: \$(BUILD)/\$(TARGET).so
	mkdir -p \$(DESTDIR)\$(PREFIX)/lib
	cp -f \$^ \$(DESTDIR)\$(PREFIX)/lib
	chmod 755 \$(DESTDIR)\$(PREFIX)/lib/\$(TARGET).so
	mkdir -p \$(DESTDIR)\$(PREFIX)/include/\$(INCNAME)
	cp -rf include/* \$(DESTDIR)\$(PREFIX)/include/\$(INCNAME)

.PHONY: uninstall
uninstall:
	rm -f \$(DESTDIR)\$(PREFIX)/lib/\$(TARGET).so
	rm -rf \$(DESTDIR)\$(PREFIX)/include/\$(INCNAME)"
}

mk_installation_alib() {
echo "\
.PHONY: install
install: \$(BUILD)/\$(TARGET).a
	mkdir -p \$(DESTDIR)\$(PREFIX)/lib
	cp -f \$^ \$(DESTDIR)\$(PREFIX)/lib
	mkdir -p \$(DESTDIR)\$(PREFIX)/include/\$(INCNAME)
	cp -rf include/* \$(DESTDIR)\$(PREFIX)/include/\$(INCNAME)

.PHONY: uninstall
uninstall:
	rm -f \$(DESTDIR)\$(PREFIX)/lib/\$(TARGET).a
	rm -rf \$(DESTDIR)\$(PREFIX)/include/\$(INCNAME)"
}

mk_installation_lib() {
echo "\
.PHONY: install
install: \$(BUILD)/\$(TARGET).so \$(BUILD)\$(TARGET).a
	mkdir -p \$(DESTDIR)\$(PREFIX)/lib
	cp -f \$^ \$(DESTDIR)\$(PREFIX)/lib
	mkdir -p \$(DESTDIR)\$(PREFIX)/include/\$(INCNAME)
	cp -rf include/* \$(DESTDIR)\$(PREFIX)/include/\$(INCNAME)

.PHONY: uninstall
uninstall:
	rm -f \$(DESTDIR)\$(PREFIX)/lib/\$(TARGET).so
	rm -f \$(DESTDIR)\$(PREFIX)/lib/\$(TARGET).a
	rm -rf \$(DESTDIR)\$(PREFIX)/include/\$(INCNAME)"
}

mk_installation() {
	case "$projtype" in
		exe) mk_installation_exe;;
		alib) mk_installation_alib;;
		solib) mk_installation_solib;;
		lib) mk_installation_lib;;
	esac
}

echo "\
# Makefile generated by Smake.

SRCS = $srcs
HDRS = $hdrs

# Defaults
PKGS =
TARGET = $target
VERSION = $(git describe 2>/dev/null || echo unknown)
PROJTYPE = $projtype
EXTRADEPS =
CONFIG ?= release
BUILD ?= build/\$(CONFIG)
WARNINGS = -Wall -Wextra -Wno-unused-parameter

CCOPTS = -Iinclude -fPIC
CCOPTS_release = -O2 -flto
CCOPTS_debug = -g
CCOPTS_sanitize = -fsanitize=address -fsanitize=undefined \$(CCOPTS_debug)

LDOPTS =
LDOPTS_release = -flto
LDOPTS_debug =
LDOPTS_sanitize = -fsanitize=address -fsanitize=undefined \$(LDOPTS_debug)

-include Smakefile

CFLAGS += \$(CCOPTS_\$(CONFIG)) \$(CCOPTS) \$(WARNINGS)
CXXFLAGS += \$(CCOPTS_\$(CONFIG)) \$(CCOPTS) \$(WARNINGS)
LDFLAGS += \$(LDOPTS_\$(CONFIG)) \$(LDOPTS)

OBJS = \$(patsubst src/%,\$(BUILD)/obj/%.o,\$(SRCS))
DEPS = \$(patsubst src/%,\$(BUILD)/dep/%.d,\$(SRCS))

PKG_CONFIG ?= pkg-config
AR ?= ar

DESTDIR ?=
PREFIX ?= /usr/local
INCNAME ?= \$(patsubst lib%,%,\$(TARGET))

ifneq (\$(PKGS),)
CFLAGS += \$(shell \$(PKG_CONFIG) --cflags \$(PKGS))
CXXFLAGS += \$(shell \$(PKG_CONFIG) --cflags \$(PKGS))
LDFLAGS += \$(shell \$(PKG_CONFIG) --libs \$(PKGS))
endif

$(mk_target)

\$(BUILD)/obj/%.c.o: src/%.c
	@mkdir -p \$(@D)
	\$(CC) -o \$@ -c \$< \$(CFLAGS)
\$(BUILD)/obj/%.cc.o: src/%.cc
	@mkdir -p \$(@D)
	\$(CXX) -o \$@ -c \$< \$(CXXFLAGS)

\$(BUILD)/dep/%.c.d: src/%.c \$(HDRS)
	@mkdir -p \$(@D)
	\$(CC) -o \$@ -MM \$< -MT \$(patsubst src/%,obj/%.o,\$<) \$(CFLAGS)
\$(BUILD)/dep/%.cc.d: src/%.cc \$(HDRS)
	@mkdir -p \$(@D)
	\$(CXX) -o \$@ -MM \$< -MT \$(patsubst src/%,obj/%.o,\$<) \$(CXXFLAGS)

$(mk_installation)

.PHONY: clean
clean:
	rm -rf \$(BUILD)

-include \$(DEPS)" > Makefile
make -j "$jobs" "$@"
