#!/bin/sh

set -e

usage() {
	echo "Usage: $0 [options] [target] ..."
	echo "Options:"
	echo "  -C DIRECTORY  Change to DIRECTORY before doing anything."
	echo "  -o FILE       Write generated file to FILE instead of 'Makefile'."
	echo "  -f FILE       Read FILE as a smakefile."
	echo "  -j N          Allow N jobs at once."
	echo "  -g            Only generate the makefile, don't run make."
	echo "  -h            Show this message and exit."
}

opt_path=.
opt_output="Makefile"
opt_file="Smakefile"
opt_generate_only=0
opt_jobs="$(command -v nproc >/dev/null && nproc || echo 8)"

# Parse args
while getopts "C:o:f:j:gh" o; do
	case "$o" in
		C) opt_path="$OPTARG";;
		o) opt_output="$(readlink -f "$OPTARG")";;
		f) opt_file="$(readlink -f "$OPTARG")";;
		j) opt_jobs="$OPTARG";;
		g) opt_generate_only=1;;
		h) usage; exit 0;;
		*) usage; exit 1;;
	esac
done
shift $((OPTIND - 1))

smakecmd="$(readlink -f "$0")"
cd "$opt_path"

if [ -f Makefile ] && ! head -n 1 Makefile | grep "Makefile generated by smake." >/dev/null; then
	echo "Makefile isn't generated by smake; refusing to overwrite." >&2
	echo "To run smake, manually move or delete the existing Makefile." >&2
	exit 1
fi

if [ -n "$MAKE" ]; then make="$MAKE"
elif make="$(command -v gmake)"; then :
elif make="$(command -v make)"; then :
else
	echo "Neither 'gmake' nor 'make' was found. Either install make or set \$MAKE." >&2
	exit 1
fi

islib() {
	[ "$1" = solib ] || [ "$1" = alib ] || [ "$1" = lib ]
}

isexec() {
	[ "$1" = exec ]
}

trim() {
	printf "%s" "$1" | tr '\n' ' ' | sed 's/^\s*//m'
}

# A somewhat ugly way to get a variable from the Smakefile,
# but at least we're using make's parser
getvar() {
	output="$(echo "\
.PHONY: _skip
_skip: dumpvar
-include $opt_file
.PHONY: dumpvar
dumpvar:
	@echo \$($1)" | $make -f - dumpvar)"

	if [ -n "$output" ]; then
		echo "$output"
	else
		echo "$2"
	fi
}

# Get some variables from the Smakefile
smakedeps="$(getvar SMAKEDEPS "")"
target="$(getvar TARGET "$(basename "$(readlink -f .)")")"
projtype="$(getvar PROJTYPE exe)"
if ! echo " exe solib alib lib " | grep " $projtype " >/dev/null; then
	echo "Invalid PROJTYPE: $projtype. Expected exe, lib, alib or solib." >&2
	exit 1
fi

# Find all the source code
if [ -d src ]; then
	sources="$(find src -name '*.c' -or -name '*.cc')"
	headers="$(find src -name '*.h')"
fi
if [ -d include ]; then
	publicheaders="$(find include -name '*.h')"
	headers="$headers$publicheaders"
fi
mk_srcs="$(printf "%s" "$sources" | tr '\n' ' ')"
mk_hdrs="$(printf "%s" "$headers" | tr '\n' ' ')"
mk_publichdrs="$(printf "%s" "$publicheaders" | tr '\n' ' ')"

# Generated make
mk_smakedep_targets=""
mk_smakedep_goals=""
mk_smakedep_targets=""
mk_smakedep_cleans=""
mk_smakedep_distcleans=""
mk_extradeps=""
mk_extrapublicdeps=""

# Flags
ccopts="-Iinclude"
ldopts=""
deptargets=""
if islib "$projtype"; then
	ccopts="$ccopts -fPIC"
fi

# Find dependencies
for dep in $smakedeps; do
	$smakecmd -C "$dep" -g

	depdeps="$($make --no-print-directory -C "$dep" PREPEND="$dep/" dumpdeps)"
	deppublicdeps="$($make --no-print-directory -C "$dep" PREPEND="$dep/" dumppublicdeps)"
	deptype="$($make --no-print-directory -C "$dep" dumpprojtype)"
	mk_extradeps="$extradeps $depdeps"
	mk_extrapublicdeps="$mk_extrapublicdeps $deppublicdeps"
	mk_smakedep_goals="$mk_smakedep_targets $dep/build/\$(CONFIG)/.built"

	mk_smakedep_targets="$mk_smakedep_targets
$dep/build/\$(CONFIG)/.built: $depdeps
	\$(MAKE) -C $dep"

	mk_smakedep_cleans="$mk_smakedep_cleans
	\$(MAKE) -C $dep clean"

	mk_smakedep_distcleans="$mk_smakedep_distcleans
	\$(MAKE) -C $dep distclean"

	if islib "$deptype"; then
		ccopts="$ccopts -isystem $dep/include"
		ldopts="$ldopts -L$dep/build/\$(CONFIG)"
	fi
done

mk_target_exe() {
echo "\
\$(BUILD)/\$(TARGET): $(trim "$mk_smakedep_goals") \$(OBJS) \$(EXTRADEPS)
	@mkdir -p \$(@D)
	\$(CC) -o \$@ \$(OBJS) \$(LDFLAGS)
	touch \$(BUILD)/.built
	@echo Created \$@."
}

mk_target_solib() {
echo "\
\$(BUILD)/\$(TARGET).so: $(trim "$mk_smakedep_goals") \$(OBJS) \$(EXTRADEPS)
	@mkdir -p \$(@D)
	\$(CC) -o \$@ \$(OBJS) -shared \$(LDLAGS)
	touch \$(BUILD)/.built
	@echo Created \$@."
}

mk_target_alib() {
echo "\
\$(BUILD)/\$(TARGET).a: $(trim "$mk_smakedep_goals") \$(OBJS) \$(EXTRADEPS)
	@mkdir -p \$(@D)
	\$(AR) crs \$@ \$(OBJS)
	touch \$(BUILD)/.built
	@echo Created \$@."
}

mk_target_lib() {
	echo "all: \$(BUILD)/\$(TARGET).so \$(BUILD)/\$(TARGET).a"
	echo
	mk_target_solib
	echo
	mk_target_alib
}

mk_target() {
	case "$projtype" in
		exe) mk_target_exe;;
		solib) mk_target_solib;;
		alib) mk_target_alib;;
		lib) mk_target_lib;;
	esac
}

mk_installation_exe() {
echo "\
.PHONY: install
install: \$(BUILD)/\$(TARGET)
	mkdir -p \$(DESTDIR)\$(PREFIX)/bin
	cp -f \$^ \$(DESTDIR)\$(PREFIX)/bin
	chmod 755 \$(DESTDIR)\$(PREFIX)/bin/\$(TARGET)

.PHONY: uninstall
uninstall:
	rm -f \$(DESTDIR)\$(PREFIX)/bin/\$(TARGET)"
}

mk_installation_solib() {
echo "\
.PHONY: install
install: \$(BUILD)/\$(TARGET).so
	mkdir -p \$(DESTDIR)\$(PREFIX)/lib
	cp -f \$^ \$(DESTDIR)\$(PREFIX)/lib
	chmod 755 \$(DESTDIR)\$(PREFIX)/lib/\$(TARGET).so
	mkdir -p \$(DESTDIR)\$(PREFIX)/include
	cp -rf include/* \$(DESTDIR)\$(PREFIX)/include

.PHONY: uninstall
uninstall:
	rm -f \$(DESTDIR)\$(PREFIX)/lib/\$(TARGET).so
	rm -rf \$(patsubst include/%,\$(DESTDIR)\$(PREFIX)/include/%,\$(wildcard include/*))"
}

mk_installation_alib() {
echo "\
.PHONY: install
install: \$(BUILD)/\$(TARGET).a
	mkdir -p \$(DESTDIR)\$(PREFIX)/lib
	cp -f \$^ \$(DESTDIR)\$(PREFIX)/lib
	mkdir -p \$(DESTDIR)\$(PREFIX)/include
	cp -rf include/* \$(DESTDIR)\$(PREFIX)/include

.PHONY: uninstall
uninstall:
	rm -f \$(DESTDIR)\$(PREFIX)/lib/\$(TARGET).a
	rm -rf \$(patsubst include/%,\$(DESTDIR)\$(PREFIX)/include/%,\$(wildcard include/*))"
}

mk_installation_lib() {
echo "\
.PHONY: install
install: \$(BUILD)/\$(TARGET).so \$(BUILD)\$(TARGET).a
	mkdir -p \$(DESTDIR)\$(PREFIX)/lib
	cp -f \$^ \$(DESTDIR)\$(PREFIX)/lib
	mkdir -p \$(DESTDIR)\$(PREFIX)/include
	cp -rf include/* \$(DESTDIR)\$(PREFIX)/include

.PHONY: uninstall
uninstall:
	rm -f \$(DESTDIR)\$(PREFIX)/lib/\$(TARGET).so
	rm -f \$(DESTDIR)\$(PREFIX)/lib/\$(TARGET).a
	rm -rf \$(patsubst include/%,\$(DESTDIR)\$(PREFIX)/include/%,\$(wildcard include/*))"
}

mk_installation() {
	case "$projtype" in
		exe) mk_installation_exe;;
		alib) mk_installation_alib;;
		solib) mk_installation_solib;;
		lib) mk_installation_lib;;
	esac
}

echo "\
# Makefile generated by smake.

SRCS = $mk_srcs
HDRS = $mk_hdrs
PUBLICHDRS = $mk_publichdrs

# Defaults
PKGS =
TARGET = $target
VERSION = $(git describe 2>/dev/null || echo unknown)
PROJTYPE = $projtype
EXTRADEPS = $(trim "$mk_extradeps")
EXTRAPUBLICDEPS = $(trim "$mk_extrapublicdeps")
CONFIG ?= release
BUILDDIR ?= build
BUILD ?= \$(BUILDDIR)/\$(CONFIG)
WARNINGS = -Wall -Wextra -Wno-unused-parameter
SMAKEFILE ?= Smakefile
PHONIES = dumpdeps dumppublicdeps dumpprojtype clean distclean

PKG_CONFIG ?= pkg-config
AR ?= ar

CCOPTS = $(trim "$ccopts")
CCOPTS_release = -O2 -flto
CCOPTS_debug = -g
CCOPTS_sanitize = -fsanitize=address -fsanitize=undefined \$(CCOPTS_debug)

LDOPTS = $(trim "$ldopts")
LDOPTS_release = -flto
LDOPTS_debug =
LDOPTS_sanitize = -fsanitize=address -fsanitize=undefined \$(LDOPTS_debug)

-include \$(SMAKEFILE)

CFLAGS += \$(CCOPTS_\$(CONFIG)) \$(CCOPTS) \$(WARNINGS)
CXXFLAGS += \$(CCOPTS_\$(CONFIG)) \$(CCOPTS) \$(WARNINGS)
LDFLAGS += \$(LDOPTS_\$(CONFIG)) \$(LDOPTS)

OBJS = \$(patsubst src/%,\$(BUILD)/obj/%.o,\$(SRCS))
DEPS = \$(patsubst src/%,\$(BUILD)/dep/%.d,\$(SRCS))

DESTDIR ?=
PREFIX ?= /usr/local

ifneq (\$(PKGS),)
CFLAGS += \$(shell \$(PKG_CONFIG) --cflags \$(PKGS))
CXXFLAGS += \$(shell \$(PKG_CONFIG) --cflags \$(PKGS))
LDFLAGS += \$(shell \$(PKG_CONFIG) --libs \$(PKGS))
endif

$(mk_target)
$mk_smakedep_targets

\$(BUILD)/obj/%.c.o: src/%.c \$(EXTRAPUBLICDEPS)
	@mkdir -p \$(@D)
	\$(CC) -o \$@ -c \$< \$(CFLAGS)
\$(BUILD)/obj/%.cc.o: src/%.cc \$(EXTRAPUBLICDEPS)
	@mkdir -p \$(@D)
	\$(CXX) -o \$@ -c \$< \$(CXXFLAGS)

\$(BUILD)/dep/%.c.d: src/%.c \$(HDRS)
	@mkdir -p \$(@D)
	\$(CC) -o \$@ -MM \$< -MT \$(patsubst src/%,\$(BUILD)/obj/%.o,\$<) \$(CFLAGS)
\$(BUILD)/dep/%.cc.d: src/%.cc \$(HDRS)
	@mkdir -p \$(@D)
	\$(CXX) -o \$@ -MM \$< -MT \$(patsubst src/%,\$(BUILD)/obj/%.o,\$<) \$(CXXFLAGS)

$(mk_installation)

.PHONY: clean
clean:
	rm -rf \$(BUILD)$mk_smakedep_cleans

.PHONY: distclean
distclean:
	rm -rf \$(BUILDDIR)$mk_smakedep_distcleans

.PHONY: dumpdeps
dumpdeps:
	@echo \$(addprefix \$(PREPEND),\$(SRCS) \$(HDRS) \$(EXTRADEPS))

.PHONY: dumppublicdeps
dumppublicdeps:
	@echo \$(addprefix \$(PREPEND),\$(PUBLICHDRS) \$(EXTRAPUBLICDEPS))

.PHONY: dumpprojtype
dumpprojtype:
	@echo \$(PROJTYPE)

ifeq (\$(filter \$(PHONIES),\$(MAKECMDGOALS)),)
-include \$(DEPS)
endif" > "$opt_output"

if [ "$opt_generate_only" = 0 ]; then
	$make SMAKEFILE="$opt_file" -j "$opt_jobs" -f "$opt_output" "$@"
fi
