#!/bin/sh

set -e

usage() {
	echo "Usage: $0 [options] [target] ..."
	echo "Options:"
	echo "  -C DIRECTORY  Change to DIRECTORY before doing anything."
	echo "  -o FILE       Write generated file to FILE instead of 'Makefile'."
	echo "  -f FILE       Read FILE as a smakefile."
	echo "  -j N          Allow N jobs at once."
	echo "  -g            Only generate the makefile, don't run make."
	echo "  -h            Show this message and exit."
}

opt_path=.
opt_output="Makefile"
opt_file="Smakefile"
opt_generate_only=0
opt_jobs="$(command -v nproc >/dev/null && nproc || echo 8)"

# Parse args
while getopts "C:o:f:j:gh" o; do
	case "$o" in
		C) opt_path="$OPTARG";;
		o) opt_output="$(readlink -f "$OPTARG")";;
		f) opt_file="$(readlink -f "$OPTARG")";;
		j) opt_jobs="$OPTARG";;
		g) opt_generate_only=1;;
		h) usage; exit 0;;
		*) usage; exit 1;;
	esac
done
shift $((OPTIND - 1))

smakecmd="$(readlink -f "$0")"
cd "$opt_path"

if [ -f Makefile ] && ! head -n 1 Makefile | grep "Makefile generated by smake." >/dev/null; then
	echo "Makefile isn't generated by smake; refusing to overwrite." >&2
	echo "To run smake, manually move or delete the existing Makefile." >&2
	exit 1
fi

# shellcheck disable=SC2153
if [ -n "$MAKE" ]; then make="$MAKE"
elif make="$(command -v gmake)"; then :
elif make="$(command -v make)"; then :
else
	echo "Neither 'gmake' nor 'make' was found. Either install make or set \$MAKE." >&2
	exit 1
fi
make="$make --no-print-directory"

islib() {
	[ "$1" = solib ] || [ "$1" = alib ] || [ "$1" = lib ]
}

trimpipe() {
	while read -r line; do
		if [ "$line" != "" ]; then
			printf "%s\\n" "$line"
			break
		fi
	done

	cat
}

trim() {
	printf "%s\\n" "$1" | trimpipe
}

# Dump some information
dumps="$(echo "\
.PHONY: _skip
all: dumpvars
-include $opt_file
.PHONY: dumpvars
dumpvars:
	@echo \$(TARGET)
	@echo \$(PROJTYPE)
	@echo \$(DEPENDS)" \
	| $make -f - dumpvars)"

# Get some variables from the Smakefile
target="$(echo "$dumps" | head -n 1)"
if [ -z "$target" ]; then target="$(basename "$(readlink -f .)")"; fi
dumps="$(echo "$dumps" | tail -n +2)"
projtype="$(echo "$dumps" | head -n 1)"
if [ -z "$projtype" ]; then projtype=exe; fi
dumps="$(echo "$dumps" | tail -n +2)"
smakedeps="$(echo "$dumps" | head -n 1)"

if ! echo " exe solib alib lib " | grep " $projtype " >/dev/null; then
	echo "Invalid PROJTYPE: $projtype. Expected exe, lib, alib or solib." >&2
	exit 1
fi

# Find all the source code
if [ -d src ]; then
	sources="$(find src -name '*.c' -or -name '*.cc' | sort)"
	headers="$(find src -name '*.h' | sort)"
fi
if [ -d include ]; then
	publicheaders="$(find include -name '*.h')"
	headers="$headers$publicheaders"
fi

mk_srcs="$(printf "%s" "$sources" | tr '\n' ' ')"
mk_hdrs="$(printf "%s" "$headers" | tr '\n' ' ')"
mk_publichdrs="$(printf "%s" "$publicheaders" | tr '\n' ' ')"

# Generated make
mk_smakedep_targets=""
mk_smakedep_goals=""
mk_smakedep_targets=""
mk_smakedep_installs=""
mk_smakedep_uninstalls=""
mk_smakedep_cleans=""
mk_smakedep_distcleans=""
mk_extradeps=""
mk_extrapublicdeps=""
mk_ccopts="-Iinclude"
mk_ldopts=""
mk_target=""
mk_all_goals=""
mk_installation=""

# Flags
if islib "$projtype"; then
	mk_ccopts="$mk_ccopts -fPIC"
fi

# Find dependencies
for dep in $smakedeps; do
	$smakecmd -C "$dep" -g

	depdeps="$($make -C "$dep" PREPEND="$dep/" dumpdeps)"
	deppublicdeps="$($make -C "$dep" PREPEND="$dep/" dumppublicdeps)"
	deptype="$($make -C "$dep" dumpprojtype)"
	mk_extradeps="$mk_extradeps $depdeps"
	mk_extrapublicdeps="$mk_extrapublicdeps $deppublicdeps"
	mk_smakedep_goals="$mk_smakedep_targets $dep/build/\$(CONFIG)/.built"

	mk_smakedep_targets="$mk_smakedep_targets
$dep/build/\$(CONFIG)/.built: $depdeps
	\$(call runpfx,'(SUB)',\$(MAKE) -C $dep)"

	mk_smakedep_installs="$mk_smakedep_installs
	\$(MAKE) -C $dep install"

	mk_smakedep_uninstalls="$mk_smakedep_uninstalls
	\$(MAKE) -C $dep uninstall"

	mk_smakedep_cleans="$mk_smakedep_cleans
	\$(MAKE) -C $dep clean"

	mk_smakedep_distcleans="$mk_smakedep_distcleans
	\$(MAKE) -C $dep distclean"

	if islib "$deptype"; then
		mk_ccopts="$mk_ccopts -isystem $dep/include"
		mk_ldopts="$mk_ldopts -L$dep/build/\$(CONFIG)"
	fi
done

# $(TARGET) for exe
if [ "$projtype" = exe ]; then
	mk_all_goals="$mk_all_goals \$(BUILD)/\$(TARGET)"
	mk_target="$mk_target
\$(BUILD)/\$(TARGET): $(trim "$mk_smakedep_goals") \$(OBJS)
	@mkdir -p \$(@D)
	\$(call runpfx,'(LD)',\$(CC) -o \$@ \$(OBJS) \$(LDFLAGS))
	touch \$(BUILD)/.built
	@echo Created \$@.
\$(TARGET): \$(BUILD)/\$(TARGET)
	cp \$< \$@
	@echo Created \$@."
fi

# $(TARGET) for solib
if [ "$projtype" = solib ] || [ "$projtype" = lib ]; then
	mk_all_goals="$mk_all_goals \$(BUILD)/\$(TARGET).so"
	mk_target="$mk_target
\$(BUILD)/\$(TARGET).so: $(trim "$mk_smakedep_goals") \$(OBJS) \$(EXTRADEPS)
	@mkdir -p \$(@D)
	\$(call runpfx,'(LD)',\$(CC) -o \$@ \$(OBJS) -shared \$(LDLAGS))
	touch \$(BUILD)/.built
	@echo Created \$@."
fi

# $(TARGET) for alib
if [ "$projtype" = alib ] || [ "$projtype" = lib ]; then
	mk_all_goals="$mk_all_goals \$(BUILD)/\$(TARGET).a"
	mk_target="$mk_target
\$(BUILD)/\$(TARGET).a: $(trim "$mk_smakedep_goals") \$(OBJS) \$(EXTRADEPS)
	@mkdir -p \$(@D)
	\$(AR) crs \$@ \$(OBJS)
	touch \$(BUILD)/.built
	@echo Created \$@."
fi

# install/uninstall for exe
if [ "$projtype" = exe ]; then
	mk_installation="$mk_installation
.PHONY: install
install: \$(BUILD)/\$(TARGET)
	mkdir -p \$(DESTDIR)\$(PREFIX)/bin
	cp -f \$^ \$(DESTDIR)\$(PREFIX)/bin
	chmod 755 \$(DESTDIR)\$(PREFIX)/bin/\$(TARGET)$mk_smakedep_installs

.PHONY: uninstall
uninstall:
	rm -f \$(DESTDIR)\$(PREFIX)/bin/\$(TARGET)$mk_smakedep_uninstalls"

# install/uninstall for solib
elif [ "$projtype" = solib ]; then
	mk_installation="
.PHONY: install
install: \$(BUILD)/\$(TARGET).so
	mkdir -p \$(DESTDIR)\$(PREFIX)/lib
	cp -f \$^ \$(DESTDIR)\$(PREFIX)/lib
	chmod 755 \$(DESTDIR)\$(PREFIX)/lib/\$(TARGET).so
	mkdir -p \$(DESTDIR)\$(PREFIX)/include
	cp -rf include/* \$(DESTDIR)\$(PREFIX)/include$mk_smakedep_installs

.PHONY: uninstall
uninstall:
	rm -f \$(DESTDIR)\$(PREFIX)/lib/\$(TARGET).so
	rm -rf \$(patsubst include/%,\$(DESTDIR)\$(PREFIX)/include/%,\$(wildcard include/*))$mk_smakedep_uninstalls"

# install/uninstall for alib
elif [ "$projtype" = alib ]; then
	mk_installation="
.PHONY: install
install: \$(BUILD)/\$(TARGET).a
	mkdir -p \$(DESTDIR)\$(PREFIX)/lib
	cp -f \$^ \$(DESTDIR)\$(PREFIX)/lib
	mkdir -p \$(DESTDIR)\$(PREFIX)/include
	cp -rf include/* \$(DESTDIR)\$(PREFIX)/include$mk_smakedep_installs

.PHONY: uninstall
uninstall:
	rm -f \$(DESTDIR)\$(PREFIX)/lib/\$(TARGET).a
	rm -rf \$(patsubst include/%,\$(DESTDIR)\$(PREFIX)/include/%,\$(wildcard include/*))$mk_smakedep_uninstalls"

# install/uninstall for lib
elif [ "$projtype" = lib ]; then
	mk_installation="
.PHONY: install
install: \$(BUILD)/\$(TARGET).so \$(BUILD)\$(TARGET).a
	mkdir -p \$(DESTDIR)\$(PREFIX)/lib
	cp -f \$^ \$(DESTDIR)\$(PREFIX)/lib
	mkdir -p \$(DESTDIR)\$(PREFIX)/include
	cp -rf include/* \$(DESTDIR)\$(PREFIX)/include$mk_smakedep_installs

.PHONY: uninstall
uninstall:
	rm -f \$(DESTDIR)\$(PREFIX)/lib/\$(TARGET).so
	rm -f \$(DESTDIR)\$(PREFIX)/lib/\$(TARGET).a
	rm -rf \$(patsubst include/%,\$(DESTDIR)\$(PREFIX)/include/%,\$(wildcard include/*))$mk_smakedep_uninstalls"
fi

echo "\
# Makefile generated by smake.

SRCS = $mk_srcs
HDRS = $mk_hdrs
OBJS = \$(patsubst src/%,\$(BUILD)/obj/%.o,\$(SRCS))
DEPS = \$(patsubst src/%,\$(BUILD)/dep/%.d,\$(SRCS))
PUBLICHDRS = $mk_publichdrs

# Defaults
PKGS =
TARGET = $target
VERSION = $(git describe 2>/dev/null || echo unknown)
PROJTYPE = $projtype
EXTRADEPS = $(trim "$mk_extradeps")
EXTRAPUBLICDEPS = $(trim "$mk_extrapublicdeps")
CONFIG ?= release
BUILDDIR ?= build
BUILD ?= \$(BUILDDIR)/\$(CONFIG)
WARNINGS = -Wall -Wextra -Wno-unused-parameter
SMAKEFILE ?= Smakefile
DESTDIR ?=
PREFIX ?= /usr/local
PHONIES = dumpdeps dumppublicdeps dumpprojtype clean distclean

PKG_CONFIG ?= pkg-config
AR ?= ar

CCOPTS = $(trim "$mk_ccopts")
CCOPTS_release = -O2 -flto
CCOPTS_debug = -g
CCOPTS_sanitize = -fsanitize=address -fsanitize=undefined \$(CCOPTS_debug)

LDOPTS = $(trim "$mk_ldopts")
LDOPTS_release = -flto
LDOPTS_debug =
LDOPTS_sanitize = -fsanitize=address -fsanitize=undefined \$(LDOPTS_debug)

runpfx = @echo \$(1) \$(2) && \$(2)

.PHONY: all
all: $(trim "$mk_all_goals")

-include \$(SMAKEFILE)

CFLAGS += \$(CCOPTS_\$(CONFIG)) \$(CCOPTS) \$(WARNINGS)
CXXFLAGS += \$(CCOPTS_\$(CONFIG)) \$(CCOPTS) \$(WARNINGS)
LDFLAGS += \$(LDOPTS_\$(CONFIG)) \$(LDOPTS)

ifneq (\$(PKGS),)
CFLAGS += \$(shell \$(PKG_CONFIG) --cflags \$(PKGS))
CXXFLAGS += \$(shell \$(PKG_CONFIG) --cflags \$(PKGS))
LDFLAGS += \$(shell \$(PKG_CONFIG) --libs \$(PKGS))
endif

$(trim "$mk_target")

$(trim "$mk_smakedep_targets")

\$(BUILD)/obj/%.c.o: src/%.c \$(EXTRAPUBLICDEPS)
	@mkdir -p \$(@D)
	\$(call runpfx,'(CC)',\$(CC) -o \$@ -c \$< \$(CFLAGS))
\$(BUILD)/obj/%.cc.o: src/%.cc \$(EXTRAPUBLICDEPS)
	@mkdir -p \$(@D)
	\$(call runpfx,'(CXX)',\$(CXX) -o \$@ -c \$< \$(CXXFLAGS))

\$(BUILD)/dep/%.c.d: src/%.c \$(HDRS)
	@mkdir -p \$(@D)
	\$(call runpfx,'(DEP)',\$(CC) -o \$@ -MM \$< -MT \$(patsubst src/%,\$(BUILD)/obj/%.o,\$<) \$(CFLAGS))
\$(BUILD)/dep/%.cc.d: src/%.cc \$(HDRS)
	@mkdir -p \$(@D)
	\$(call runpfx,'(DEP)',\$(CXX) -o \$@ -MM \$< -MT \$(patsubst src/%,\$(BUILD)/obj/%.o,\$<) \$(CXXFLAGS))

$(trim "$mk_installation")

.PHONY: clean
clean:
	rm -rf \$(TARGET) \$(BUILD)$mk_smakedep_cleans

.PHONY: distclean
distclean:
	rm -rf \$(BUILDDIR)$mk_smakedep_distcleans

.PHONY: dumpdeps
dumpdeps:
	@echo \$(addprefix \$(PREPEND),\$(SRCS) \$(HDRS) \$(EXTRADEPS))

.PHONY: dumppublicdeps
dumppublicdeps:
	@echo \$(addprefix \$(PREPEND),\$(PUBLICHDRS) \$(EXTRAPUBLICDEPS))

.PHONY: dumpprojtype
dumpprojtype:
	@echo \$(PROJTYPE)

ifeq (\$(filter \$(PHONIES),\$(MAKECMDGOALS)),)
-include \$(DEPS)
endif" > "$opt_output"

if [ "$opt_generate_only" = 0 ]; then
	$make SMAKEFILE="$opt_file" -j "$opt_jobs" -f "$opt_output" "$@"
fi
